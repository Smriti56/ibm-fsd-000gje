<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Using Keycloak instead of Picketlink for SAML-based authentication</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iQAC_9KfDOs/" /><category term="Red Hat JBoss Enterprise Application Platform" /><category term="Red Hat SSO" /><category term="Security" /><category term="keycloak" /><category term="WildFly" /><author><name>Siddhartha De</name></author><id>https://developers.redhat.com/blog/?p=517667</id><updated>2019-08-27T07:00:26Z</updated><published>2019-08-27T07:00:26Z</published><content type="html">&lt;p&gt;The &lt;a href="http://picketlink.org/"&gt;Picketlink&lt;/a&gt; project is now a deprecated module in &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (EAP)&lt;/a&gt;, so there&amp;#8217;s a chance that Picketlink will no longer ship with the next release of EAP/Wildfly and that there will not be any fixes in the near future for the &lt;code&gt;picketlink&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;Picketlink, however, is now merged with &lt;a href="https://www.keycloak.org/about.html"&gt;Keycloak&lt;/a&gt;, an open source identity and access management solution developed by Red Hat&amp;#8217;s JBoss Community. In this article, we&amp;#8217;ll present an alternative solution to the &lt;code&gt;picketlink&lt;/code&gt; module. Some organizations use &lt;code&gt;picketlink&lt;/code&gt; as the service provider to enable SAML-based authentication with a third-party identity provider (i.e., Active Directory Federated Services (AD FS), OKTA, PingFederate, etc.). In this, article, we&amp;#8217;ll see how the keycloak-saml adapter can be configured in the place of Picketlink to enable SAML-based authentication with a third-party identity provider.&lt;/p&gt; &lt;p&gt;&lt;span id="more-517667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Set up the Relying Party&lt;/h3&gt; &lt;div dir="ltr"&gt;In AD FS Management console, right-click &lt;em&gt;Trust relationships → Relying Party Trusts&lt;/em&gt; and select &lt;em&gt;Add Relying Party Trust&lt;/em&gt; from the menu:&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;p&gt;&lt;img src="https://lh5.googleusercontent.com/7xezIIuj00qQLFIB0LR53uOpwionzFfz9OXjdzqlCdkptUO-l2LumtxNuS2IgvyyZyP78shXObIzi4xwjeDGdbK5WrrN9QAAlsVpndEf9X3al3FDwzJB4GJREAMY0S6Ot4lGrzk" /&gt;&lt;/p&gt; &lt;p id="uksEVJh"&gt;AD FS allows you to import metadata, which completes the configuration without any manual intervention. However, here we are required to go with manual configuration.&lt;/p&gt; &lt;/div&gt; &lt;p id="DulEjws"&gt;&lt;img class=" alignnone size-full wp-image-618217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png 714w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65-300x239.png 300w" sizes="(max-width: 714px) 100vw, 714px" /&gt;&lt;/p&gt; &lt;p&gt;Select &lt;em&gt;AD FS profile&lt;/em&gt; for SAML2.0 based federation:&lt;/p&gt; &lt;p id="vnIxyTD"&gt;&lt;img class=" alignnone size-full wp-image-618227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png 543w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed-300x101.png 300w" sizes="(max-width: 543px) 100vw, 543px" /&gt;&lt;/p&gt; &lt;p&gt;If you are required to enable encrypted assertion, import the certificate that will be used for encryption, but make sure that the associated private key is present with the service provider.&lt;/p&gt; &lt;p id="asCZtfF"&gt;&lt;img class=" alignnone size-full wp-image-618237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png 539w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799-300x106.png 300w" sizes="(max-width: 539px) 100vw, 539px" /&gt;&lt;/p&gt; &lt;p&gt;Check the SAML2.0 WebSSO protocol support to enable SAML federation with a web application:&lt;/p&gt; &lt;p id="PdOtPqK"&gt;&lt;img class=" alignnone size-full wp-image-618247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png 553w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276-300x211.png 300w" sizes="(max-width: 553px) 100vw, 553px" /&gt;&lt;/p&gt; &lt;p&gt;Add the URL of the relying party trust; multiple URLs can be added here:&lt;/p&gt; &lt;p id="wWCpLxU"&gt;&lt;img class=" alignnone size-full wp-image-618257 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png 542w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2-300x106.png 300w" sizes="(max-width: 542px) 100vw, 542px" /&gt;&lt;/p&gt; &lt;p&gt;Permit all users to enable access for all the user to the relying-party:&lt;/p&gt; &lt;p id="voPRlEe"&gt;&lt;img class=" alignnone size-full wp-image-618267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png 547w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8-300x115.png 300w" sizes="(max-width: 547px) 100vw, 547px" /&gt;&lt;/p&gt; &lt;p&gt;Once the relying party trust is added, AD FS will be able to correctly authenticate the users according to requests from the service provider, but the requested name ID format will not yet be recognized and the SAML response will not contain any additional information like email. Thus, it&amp;#8217;s necessary to map claims from AD user details into a SAML document.&lt;/p&gt; &lt;h3&gt;Three rules&lt;/h3&gt; &lt;p&gt;We will set up three rules: one for mapping user ID, one for mapping standard user attributes, and another for a user group. All of these start by clicking the &lt;em&gt;Add Rule&lt;/em&gt; button in the &lt;em&gt;Edit Claim Rules&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-full" src="https://lh6.googleusercontent.com/d_P1vSYXxcWXunGnl9g_3GHGFqzWfPWcxFlSJm1HvW1fhQtPAoLjjNhpBppupxNXwEyQ4_qG45vXTlwSTotAaWxHZQfit88TM7K9RwkvUtSHzphUoaoIISoX4Nl77Nhgv1aFDys" width="510" height="557" /&gt;&lt;/p&gt; &lt;p&gt;The first rule will map the user ID in Windows Qualified Domain name to the SAML response. In the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window, select &lt;em&gt;Transform&lt;/em&gt; an incoming claim rule type:&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-full" src="https://lh5.googleusercontent.com/jSXZhgQ_8_NvGsG9DhvUXbNKBpF8xORc_jAkQkNNb-BM6rbcGaqZJ0m-VDXiYCAVUMVHQG7ygdaS4yGk4XTkCOLcpAeIw0MVXfNOzLsytGBazlQ0rooJMN8KC6PQFok7qWS7FOY" width="730" height="589" /&gt;&lt;/p&gt; &lt;div dir="ltr"&gt;The example above targets the Windows account name ID format. Other name ID formats are supported but are outside the scope of this post. See &lt;a href="https://blogs.msdn.microsoft.com/card/2010/02/17/name-identifiers-in-saml-assertions/"&gt;this article&lt;/a&gt; on how to set up name IDs for persistent and transient formats.&lt;/div&gt; &lt;p&gt;The second rule will map the user email to the SAML response. In the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window, select Send LDAP attributes as Claims rule type. You can add other attributes as needed:&lt;/p&gt; &lt;div dir="ltr"&gt;&lt;img class="alignnone size-full" src="https://lh4.googleusercontent.com/lskbFPTz1mUbpNcOJdME27smfEbbEUe_WHHu8vNRswxNhf3dmEEZwFyuXdXPPt3yLp1oUCD1E7kf9n6CCyeRxdExSJqJKcSMlJMLCOUMWo8KjaAqZTcell7cpIBqNSa52kCeb5Q" width="563" height="597" /&gt;&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;p&gt;The third rule would send a group name if the user is a member of a named group. Again, start in the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window and select &lt;em&gt;Send Group Membership&lt;/em&gt; as a &lt;em&gt;Claim rule&lt;/em&gt; type. Then enter the requested values in the field:&lt;/p&gt; &lt;/div&gt; &lt;div dir="ltr"&gt;&lt;img class="alignnone size-full" src="https://lh6.googleusercontent.com/HlWHP-WN3coMtQX8XR-lr7-ccsVACSesTC3fEeQrGUtEzTGmb7kjCspmwpGxvEGGGT7rqggJPvfZEqmxvEEMDg61hyqsNJcZXZwbMWlGsOjUcnzwyF0iC9jRfAafHAOfkxtkXAY" width="730" height="589" /&gt;&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;div dir="ltr"&gt;This setup would send an attribute named Group in the SAML assertion with value managers if the authenticated user is a member of the DOMAIN\Managers group.&lt;/div&gt; &lt;/div&gt; &lt;div dir="ltr"&gt;&lt;/div&gt; &lt;div dir="ltr"&gt;Now install keycloak-saml-adapter in Wildfly,&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Download the Wildfly client adapter from &lt;a href="https://www.keycloak.org/downloads.html"&gt;https://www.keycloak.org/downloads.html&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Unzip the saml-adapter at &lt;code&gt;$Wildfly_Home&lt;/code&gt;. In Linux, unzip can be done by executing the command &lt;code&gt;unzip keycloak-wildfly-adapter-dist.zip&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Post successful extraction a CLI script. &lt;code&gt;adapter-install-saml.cli&lt;/code&gt; will be present at &lt;code&gt;$Wildfly_Home/bin&lt;/code&gt;, which is required to be executed through the jboss-cli command, i.e., &lt;code&gt;$Wildfly_Home/bin/jboss-cli.sh --connect --file=adapter-install-saml.cli&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;div dir="ltr" style="text-align: left;"&gt; &lt;p id="fkrKUOp"&gt;&lt;img class=" alignnone size-full wp-image-619037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png 676w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a-300x83.png 300w" sizes="(max-width: 676px) 100vw, 676px" /&gt;&lt;/p&gt; &lt;p&gt;Wildfly is now ready with keycloak-saml adapter. To enable authentication with AD FS through SAML protocol, the &lt;code&gt;keycloak-saml.xml&lt;/code&gt; file must be configured similarly to the picketlink.xml, as shown below, and placed at application&amp;#8217;s WEB-INF.&lt;/p&gt; &lt;pre&gt;&amp;#60;keycloak-saml-adapter xmlns="urn:keycloak:saml:adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:keycloak:saml:adapter http://www.keycloak.org/schema/keycloak_saml_adapter_1_7.xsd"&amp;#62; &amp;#60;SP entityID="https://example.com:8443/saml-servlet-filter/" sslPolicy="EXTERNAL" nameIDPolicyFormat="urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName" logoutPage="/logout.jsp"&amp;#62; &amp;#60;IDP entityID="idp" signatureAlgorithm="RSA_SHA256"&amp;#62; &amp;#60;SingleSignOnService signRequest="false" validateResponseSignature="false" requestBinding="POST" bindingUrl="https://example.adfs.com/adfs/ls/"/&amp;#62; &amp;#60;SingleLogoutService signRequest="false" signResponse="false" validateRequestSignature="false" validateResponseSignature="false" requestBinding="POST" responseBinding="POST" postBindingUrl="https://example.adfs.com/adfs/ls/" redirectBindingUrl="https://example.adfs.com/adfs/ls/"/&amp;#62; &amp;#60;/IDP&amp;#62; &amp;#60;/SP&amp;#62; &amp;#60;/keycloak-saml-adapter&amp;#62;&lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it. Now the keycloak-saml adapter is set up and ready to go.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#038;title=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" data-a2a-url="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/" data-a2a-title="Using Keycloak instead of Picketlink for SAML-based authentication"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/"&gt;Using Keycloak instead of Picketlink for SAML-based authentication&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iQAC_9KfDOs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Picketlink project is now a deprecated module in Red Hat JBoss Enterprise Application Platform (EAP), so there&amp;#8217;s a chance that Picketlink will no longer ship with the next release of EAP/Wildfly and that there will not be any fixes in the near future for the picketlink module. Picketlink, however, is now merged with Keycloak, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/"&gt;Using Keycloak instead of Picketlink for SAML-based authentication&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">517667</post-id><dc:creator>Siddhartha De</dc:creator><dc:date>2019-08-27T07:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/</feedburner:origLink></entry><entry><title>DevNation Live: Kubernetes enterprise integration patterns with Camel K</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nz2RntomQo0/" /><category term="Kubernetes" /><category term="Camel K" /><category term="kubernetes" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=614367</id><updated>2019-08-27T06:59:23Z</updated><published>2019-08-27T06:59:23Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. This talk from Nicola Ferraro and Luca Burgazzoli will explore &lt;a href="https://www.nicolaferraro.me/2018/10/15/introducing-camel-k/"&gt;Camel K&lt;/a&gt;, a lightweight integration platform that allows enterprise integration patterns to be used natively on any &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; cluster.&lt;/p&gt; &lt;p&gt;&lt;span id="more-614367"&gt;&lt;/span&gt;When used in combination with &lt;a href="https://developers.redhat.com/topics/knative/"&gt;Knative&lt;/a&gt;, a framework that adds serverless building blocks to Kubernetes, and the subatomic execution environment of Quarkus, Camel K can mix serverless features such as auto-scaling, scaling to zero, and event-based communication with the outstanding integration capabilities of Apache Camel.&lt;/p&gt; &lt;p&gt;This session will show how Camel K works and provide examples to demonstrate how Camel K makes it easier to connect cloud services or enterprise applications using some of the 250+ components that Camel provides.&lt;/p&gt; &lt;p&gt;Watch the complete video:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/51x9BewGCYA" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#038;title=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" data-a2a-url="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/" data-a2a-title="DevNation Live: Kubernetes enterprise integration patterns with Camel K"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/"&gt;DevNation Live: Kubernetes enterprise integration patterns with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nz2RntomQo0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. This talk from Nicola Ferraro and Luca Burgazzoli will explore Camel K, a lightweight integration platform that allows enterprise integration patterns to be used natively [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/"&gt;DevNation Live: Kubernetes enterprise integration patterns with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">614367</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-27T06:59:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/</feedburner:origLink></entry><entry><title>10 Quarkus videos to get you up to speed with supersonic, subatomic Java</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lNBmgr6np74/" /><category term="Quarkus" /><category term="Java" /><category term="kubernetes" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=620317</id><updated>2019-08-26T07:00:08Z</updated><published>2019-08-26T07:00:08Z</published><content type="html">&lt;p&gt;Maybe you’ve heard about &lt;a href="https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/"&gt;Quarkus&lt;/a&gt;, also known as supersonic, subatomic Java. According to &lt;a href="https://quarkus.io/"&gt;&lt;span style="font-weight: 400;"&gt;Quarkus.io&lt;/span&gt;&lt;/a&gt;, it’s a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards.&lt;/p&gt; &lt;p&gt;To help you learn more, we’ve rounded up 10 talks showing Quarkus in action. These videos will take your Quarkus knowledge to the next level.&lt;/p&gt; &lt;h3&gt;1. Introducing Quarkus: A next-generation Kubernetes native Java framework&lt;/h3&gt; &lt;p&gt;By Thomas Qvarnstrom and Jason Greene&lt;/p&gt; &lt;p&gt;The goal of Quarkus is to make Java a leading platform in Kubernetes and serverless environments, while offering developers a unified reactive and imperative programming model to optimally address a wider range of distributed application architectures. Learn more in this introduction to the project.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/ZCsWi_641Rk" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;2. Quarkus: Supersonic, subatomic Java&lt;/h3&gt; &lt;p&gt;By Burr Sutter&lt;/p&gt; &lt;p&gt;This &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live&lt;/a&gt; tutorial demonstrates how to use Quarkus to optimize your enterprise Java apps, your APIs, your microservices, and your serverless functions for a Kubernetes/OpenShift environment that is vastly smaller, faster, and more scalable.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/7G_r1iyrn2c" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;3. Quarkus and GraalVM: Booting Hibernate at supersonic speed, subatomic size&lt;/h3&gt; &lt;p&gt;By Sanne Grinovero&lt;/p&gt; &lt;p&gt;In this presentation, you’ll learn how Quarkus was created, how it works, and how it’s able to make complex libraries, such as Hibernate ORM, compatible with GraalVM native images.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/za5CSBX-UME" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;4. Taste of serverless application development&lt;/h3&gt; &lt;p&gt;By Marthen Luther&lt;/p&gt; &lt;p&gt;This talk shows how to create a simple Java application using Quarkus and deploy it as a serverless application on Knative.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/-c1Sh-1uAeM" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;5. Coding that sparks joy with Quarkus&lt;/h3&gt; &lt;p&gt;By Edson Yanaga&lt;/p&gt; &lt;p&gt;Create your first Quarkus project and learn why the tool sparks joy in the hearts of developers.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/8r3ZV36ah4I" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;6. The (a) future of Java and containers&lt;/h3&gt; &lt;p&gt;By Mark Little&lt;/p&gt; &lt;p&gt;This presentation takes you through the history of Java and explains why Quarkus is a game-changer for the future.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/O085h6jKBWc" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;7. Quarkus: Supersonic, subatomic Java&lt;/h3&gt; &lt;p&gt;By Dimitris Andreadis&lt;/p&gt; &lt;p&gt;Learn about the benefits of Quarkus, including developer joy, supersonic speed, and best of breed libraries and standards in this overview.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/UWETnSFB0WA" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;8. Subatomic reactive systems with Quarkus&lt;/h3&gt; &lt;p&gt;By Clement Escoffier&lt;/p&gt; &lt;p&gt;Quarkus provides a supersonic development experience and a subatomic execution environment thanks to its integration with GraalVM. This talk is about the reactive side of Quarkus and how to use it to implement reactive and data-streaming applications.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/trwJxZawglc" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;9. Build Eclipse MicroProfile apps quickly with Quarkus&lt;/h3&gt; &lt;p&gt;By John Clingan&lt;/p&gt; &lt;p&gt;Combining Eclipse MicroProfile and Quarkus lets developers deliver feature-rich, container-based MicroProfile applications that start in under tens of milliseconds. This talk live-codes a container-based MicroProfile application that is deployed to Kubernetes.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/hReKM6rmcho" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;10. Java, turbocharged&lt;/h3&gt; &lt;p&gt;By Marcus Biel&lt;/p&gt; &lt;p&gt;This talk demonstrates how to use Quarkus to create super small, super fast Java containers, which can be a game-changer, especially in a serverless environment.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/eqUApOrYeS8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#038;title=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" data-a2a-url="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/" data-a2a-title="10 Quarkus videos to get you up to speed with supersonic, subatomic Java"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/"&gt;10 Quarkus videos to get you up to speed with supersonic, subatomic Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lNBmgr6np74" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Maybe you’ve heard about Quarkus, also known as supersonic, subatomic Java. According to Quarkus.io, it’s a Kubernetes-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards. To help you learn more, we’ve rounded up 10 talks showing Quarkus in action. These videos will take your Quarkus [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/"&gt;10 Quarkus videos to get you up to speed with supersonic, subatomic Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620317</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-26T07:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/</feedburner:origLink></entry><entry><title>5 Questions Everyone's Asking About Microservices (Question 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/I48hz0ev0ns/5-questions-everyones-asking-about-microservices-question3.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-5_questions_everyone_s_asking_about_microservices_question_3</id><updated>2019-08-26T11:54:11Z</updated><published>2019-08-26T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s1600/questions.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="666" data-original-width="1000" height="213" src="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s320/questions.jpg" width="320" /&gt;&lt;/a&gt;When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. &lt;br /&gt;&lt;br /&gt;These articles cover questions that everyone should ask about microservices. Their based on experiences from interactions with organizations in the process of conquering microservices for existing development and for delivering modern applications.&lt;br /&gt;&lt;br /&gt;Previously we covered the first question around &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question1.html" target="_blank"&gt;the performance impact of microservices&lt;/a&gt; and the second question on &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question2.html" target="_blank"&gt;state and monoliths&lt;/a&gt;. In this third article we'll take a look at data and your distributed microservices.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Data and microservices&lt;/h3&gt;&lt;div style="text-align: left;"&gt;State discussions are central to the move to microservices for many developers and architects. Following that train of thought leads to questions around how to create a consistent state view using the data sources currently in their architecture.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;“How to deal with databases backing distributed services so that the state is a single state view in the entire system?”&lt;/i&gt;&lt;br /&gt;The best part about this discussion is that a colleague of ours has addressed this quite extensively in a book. Even better, it’s free to download (&lt;a href="http://bit.ly/mono2microdb"&gt;bit.ly/mono2microdb&lt;/a&gt;) and provides a lot of tips.&lt;br /&gt;&lt;br /&gt;Another option you can look at might be an open source tool &lt;a href="https://debezium.io/" target="_blank"&gt;Debezium&lt;/a&gt; for smart database change data capturing. From their website, &lt;i&gt;"Debezium is essentially a modern, distributed open source change data capture platform that will eventually support monitoring a variety of database systems."&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Next time in this series of articles, a look at testing stateful microservices.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;span style="font-size: small;"&gt;&lt;i&gt;(article co-authored with &lt;a href="https://twitter.com/burrsutter" target="_blank"&gt;Burr Sutter) &lt;/a&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qQSHzEuHj0w:95Z0Vdk5Zow:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qQSHzEuHj0w:95Z0Vdk5Zow:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qQSHzEuHj0w:95Z0Vdk5Zow:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qQSHzEuHj0w:95Z0Vdk5Zow:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qQSHzEuHj0w:95Z0Vdk5Zow:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/qQSHzEuHj0w" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/I48hz0ev0ns" height="1" width="1" alt=""/&gt;</content><summary>When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. These articles cover questions that ever...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-26T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/qQSHzEuHj0w/5-questions-everyones-asking-about-microservices-question3.html</feedburner:origLink></entry><entry><title>Keycloak 7.0.0 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/d75TZOJ4PeQ/keycloak-700-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_7_0_0_released</id><updated>2019-08-24T00:00:00Z</updated><published>2019-08-24T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org/downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For details on what is included in the release check out the &lt;a href="https://www.keycloak.org/docs/latest/release_notes/index.html"&gt;Release notes&lt;/a&gt;. The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%207.0.0"&gt;JIRA&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org/docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/d75TZOJ4PeQ" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. For details on what is included in the release check out the Release notes. The full list of resolved issues are available in JIRA Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Keycloak</dc:creator><dc:date>2019-08-24T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org/2019/08/keycloak-700-released.html</feedburner:origLink></entry><entry><title>Run Red Hat Enterprise Linux 8 in a container on RHEL 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EZzktLZEqes/" /><category term="Containers" /><category term="Red Hat Enterprise Linux" /><category term="RHEL8" /><category term="Universal Base Images (UBI)" /><category term="containers" /><category term="universal base images" /><author><name>Rob Terzi</name></author><id>https://developers.redhat.com/blog/?p=620177</id><updated>2019-08-23T07:00:41Z</updated><published>2019-08-23T07:00:41Z</published><content type="html">&lt;p&gt;You can start developing with the latest versions of languages, databases, and web servers available with &lt;a href="https://developers.redhat.com/rhel8/"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; even if you are still running RHEL 7. It is pretty simple to do with containers, even if you’ve only been through a “Hello, World” or two.&lt;/p&gt; &lt;p&gt;By the end of this article, you’ll have the current &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;RHEL 8 application stream&lt;/a&gt; versions of PHP, MariaDB, and Apache HTTPD running in containers, managed by systemd on your RHEL 7 system. &lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools/"&gt;Podman&lt;/a&gt; makes it easy to accomplish this since there is no container daemon to complicate things. We’ll use WordPress as a placeholder for your own application code.&lt;span id="more-620177"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;From my perspective, using RHEL 8 application streams in a container is preferable to using software collections. All of the software installs in the locations you’d expect. There is no need to use &lt;code&gt;scl&lt;/code&gt; commands to manage selected versions of software, instead each container gets an isolated filesystem. You don’t have to worry about conflicting versions. You just need to get comfortable using &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In case you haven’t been following the &lt;a href="https://developers.redhat.com/"&gt;Red Hat Developer blog&lt;/a&gt; closely, there are a few new things you should know. For example, If you are looking for rhel8 container images you might be surprised to find them under &lt;code&gt;ubi8&lt;/code&gt; instead of &lt;code&gt;rhel8.&lt;/code&gt; This article pulls those details together to get you started using RHEL 8 application streams and &lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;Universal Base Images&lt;/a&gt; (UBI) in containers so you’ll have up-to-date versions for development.&lt;/p&gt; &lt;h2&gt;TL;DR — How to run RHEL 8 in a container on RHEL 7&lt;/h2&gt; &lt;pre&gt;$ sudo subscription-manager repos --enable rhel-7-server-extras-rpms $ sudo yum install podman buildah $ sudo podman login registry.redhat.io $ sudo podman run -it registry.redhat.io/ubi8/ubi&lt;/pre&gt; &lt;p&gt;Now inside the RHEL 8 container, see what application streams are available, then install PHP 7.2:&lt;/p&gt; &lt;pre&gt;# yum module list # yum -y module install php/7.2 # php -v&lt;/pre&gt; &lt;p&gt;Now you have the application stream for PHP 7.2 in the running container and can explore the other RHEL 8 application streams and rpms. Later in the article, we&amp;#8217;ll cover how to get MariaDB and HTTPD running in containers.&lt;/p&gt; &lt;h2&gt;Install Podman and Buildah on RHEL 7&lt;/h2&gt; &lt;p&gt;First, we need to install Podman, which is in the &lt;em&gt;extras&lt;/em&gt; repo on RHEL 7. The extras repo isn’t enabled by default. It is recommended that developers also enable the rhscl (&lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt;), devtools, and optional repos.&lt;/p&gt; &lt;pre&gt;$ sudo subscription-manager repos --enable rhel-7-server-extras-rpms \ --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms \ --enable rhel-7-server-devtools-rpms&lt;/pre&gt; &lt;p&gt;Now install Podman and Buildah. If sudo isn’t set up on your system, see &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;&amp;#8220;How to enable sudo on Red Hat Enterprise Linux&lt;/a&gt;.&amp;#8221;&lt;/p&gt; &lt;pre&gt;$ sudo yum install podman buildah&lt;/pre&gt; &lt;p&gt;Later, we’ll be running containers with systemd. If SELinux is enabled on your system, which is the default, you must turn on the &lt;code&gt;container_manage_cgroup&lt;/code&gt; boolean to run containers with systemd. For more information, see the &lt;a href="https://access.redhat.com/solutions/3387631"&gt;&amp;#8220;containers running systemd&lt;/a&gt;&amp;#8221; solution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Red Hat ID that was created when you joined Red Hat Developers gives you access to content on the Red Hat Customer Portal.&lt;/p&gt; &lt;pre&gt;$ sudo setsebool -P container_manage_cgroup on &lt;/pre&gt; &lt;h2&gt;Run RHEL 8 in a container&lt;/h2&gt; &lt;p&gt;Next, we’ll pull the RHEL 8 universal base image; but first, we’re going to log into the new Red Hat Container registry which supports authentication, &lt;a href="http://registry.redhat.io"&gt;registry.redhat.io&lt;/a&gt;. If you don’t log in, you’ll get a somewhat cryptic error message when you try to pull down an image that requires authentication.&lt;/p&gt; &lt;p&gt;Use your Red Hat Developer username and password to log in to the registry:&lt;/p&gt; &lt;pre&gt;$ sudo podman login registry.redhat.io&lt;/pre&gt; &lt;p&gt;Note: podman has been designed so that it can be run without root. However, the support for it isn’t there with RHEL 7.6. For more information, see Scott McCarty’s &lt;a href="https://www.redhat.com/en/blog/preview-running-containers-without-root-rhel-76"&gt;preview of running containers without root in RHEL 7.6&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Ok, now pull the RHEL 8 image:&lt;/p&gt; &lt;pre&gt;$ sudo podman pull registry.redhat.io/ubi8/ubi&lt;/pre&gt; &lt;p&gt;You can now inspect the image to see things like the command that will be run when the container is started, for example:&lt;/p&gt; &lt;pre&gt;$ sudo podman inspect registry.redhat.io/ubi8/ubi | grep -A 1 Cmd&lt;/pre&gt; &lt;p&gt;If you need help with Podman commands, see the &lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;Podman Basics Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now run the RHEL 8 container:&lt;/p&gt; &lt;pre&gt;$ sudo podman run -it registry.redhat.io&lt;/pre&gt; &lt;p&gt;Because the default command is &lt;code&gt;/bin/bash&lt;/code&gt;, you’ll be dropped into a Bash shell with a RHEL 8 userland. Check the version and then see what application streams are available:&lt;/p&gt; &lt;pre&gt;# cat /etc/redhat-release # yum module list&lt;/pre&gt; &lt;p&gt;You can install and explore application streams and/or other rpms at this point. Keep in mind that containers are designed to be ephemeral, so changes you make won’t stick around.&lt;/p&gt; &lt;p&gt;For RHEL 8 commands, see the &lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-developer-cheat-sheet/"&gt;RHEL 8 Developer Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you are done and have exited the container, you can clean it up with &lt;code&gt;podman rm&lt;/code&gt;. To make things easy during development there is an option, &lt;code&gt;-a&lt;/code&gt; that will get rid of all of the containers on your system:&lt;/p&gt; &lt;pre&gt;$ sudo podman rm -a &lt;/pre&gt; &lt;h2&gt;Red Hat Universal Base Images&lt;/h2&gt; &lt;p&gt;In the &lt;code&gt;yum module list&lt;/code&gt; output from RHEL 8 in a container, you might notice application streams labeled Red Hat Universal Base Image 8 and others labeled Red Hat Enterprise Linux 8. So, what is UBI all about?&lt;/p&gt; &lt;p&gt;From Mike Guerette’s article, &amp;#8220;&lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&amp;#8221;&lt;/a&gt;:&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;“Red Hat Universal Base Images (UBI) are OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous RHEL base images, they are built from portions of Red Hat Enterprise Linux. UBI images can be obtained from the Red Hat Container Catalog and be built and deployed anywhere.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;And, you don’t need to be a Red Hat customer to use or redistribute them. Really.”&lt;/p&gt; &lt;p&gt;With the release of RHEL 8 in May, Red Hat &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;announced&lt;/a&gt; that all RHEL 8 base images would be available under the new &lt;a href="https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf"&gt;Universal Base Image End User License Agreement (EULA)&lt;/a&gt;. This means you can build and redistribute container images that use Red Hat’s UBI images as your base instead of having to switch to images based on other distributions, like Alpine. In other words, you won’t have to switch from using yum to using apt-get when building containers.&lt;/p&gt; &lt;p&gt;There are three base images for RHEL 8. The standard one is called &lt;code&gt;ubi&lt;/code&gt;, or more precisely, &lt;code&gt;ubi8/ubi&lt;/code&gt;. This is the image used above and is the one you will probably use most often. The other two are very minimal containers; they have very little supporting software in them for when image size is a high priority and a multi-service image that allows you to run multiple processes inside the container managed by systemd.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are also UBI images for RHEL 7 under &lt;code&gt;ubi7&lt;/code&gt; if you want to build and distribute containers running on a RHEL 7 image. For this article, we’ll only be using the &lt;code&gt;ubi8&lt;/code&gt; images.&lt;/p&gt; &lt;p&gt;If you are just starting out with containers, you might not need to delve into UBI details right now. Just use the &lt;code&gt;ubi8&lt;/code&gt; images to build containers based off RHEL 8. However, you will want to understand UBI details when you start distributing container images or have questions about support. For more information, see the references at the end of this article.&lt;/p&gt; &lt;h2&gt;Run MariaDB in a container&lt;/h2&gt; &lt;p&gt;In this next step, we’ll get the RHEL 8 MariaDB application stream running in a container managed by systemd on the host system. We’ll follow the example from Alessandro Arrichiello’s article, &lt;a href="https://developers.redhat.com/blog/2018/11/29/managing-containerized-system-services-with-podman/"&gt;&amp;#8220;Managing containerized system services with Podman&lt;/a&gt;,&amp;#8221; but update it to use the RHEL 8 application stream.&lt;/p&gt; &lt;p&gt;First, pull down the MariaDB image. &lt;strong&gt;Note:&lt;/strong&gt; When this article was written there wasn’t a MariaDB image based on UBI in the Red Hat Container Catalog.&lt;/p&gt; &lt;pre&gt;$ sudo podman pull registry.redhat.io/rhel8/mariadb-103&lt;/pre&gt; &lt;p&gt;Because containers are designed to be ephemeral, we need to set up permanent storage for the database. We’ll set up a directory on the host’s system and map it into the container. First, inspect the image to find the user ID we’ll need for the directories. Alternatively, we could also get information about this image from the &lt;a href="https://access.redhat.com/articles/2959661"&gt;Red Hat Container Catalog&lt;/a&gt; page.&lt;/p&gt; &lt;pre&gt;$ sudo podman inspect mariadb-103 | grep -A 1 User&lt;/pre&gt; &lt;p&gt;Once you have the user ID, create a directory on the host and give that User ID ownership.&lt;/p&gt; &lt;pre&gt;$ sudo mkdir -p /opt/var/lib/mysql/data $ sudo chown 27:27 /opt/var/lib/mysql/data&lt;/pre&gt; &lt;p&gt;Next, create a systemd unit file to manage mysqld. As root, use an editor or &lt;code&gt;cat &amp;#62;&lt;/code&gt; to create &lt;code&gt;/etc/systemd/system/mariadb-wordpress.service&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;[Unit] Description=Custom MariaDB Podman Container After=network.target [Service] Type=simple TimeoutStartSec=5m ExecStartPre=-/usr/bin/podman rm "mariadb-wordpress" ExecStart=/usr/bin/podman run --name mariadb-wordpress -v /opt/var/lib/mysql/data:/var/lib/mysql/data:Z -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=mysecret -e MYSQL_DATABASE=wordpress --net host registry.redhat.io/rhel8/mariadb-103 ExecReload=-/usr/bin/podman stop "mariadb-wordpress" ExecReload=-/usr/bin/podman rm "mariadb-wordpress" ExecStop=-/usr/bin/podman stop "mariadb-wordpress" Restart=always RestartSec=30 [Install] WantedBy=multi-user.target&lt;/pre&gt; &lt;p&gt;Next, tell systemd to reload, start the MariaDB service, and then check the output:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl daemon-reload $ sudo systemctl start mariadb-wordpress $ sudo systemctl status mariadb-wordpress&lt;/pre&gt; &lt;p&gt;The MariaDB port, 3306, is exposed to the host system. So if you have the client installed, you should be able to connect to the database.&lt;/p&gt; &lt;h2&gt;Set up the HTTPD and PHP container&lt;/h2&gt; &lt;p&gt;Next, we’ll need a web server and a recent PHP running in a container. Browsing the Red Hat Container Catalog, you’ll find a PHP 7.2 image that includes Apache HTTPD 2.4 and is based on ubi8. Start by pulling down the image:&lt;/p&gt; &lt;pre&gt;$ sudo podman pull registry.redhat.io/ubi8/php-72&lt;/pre&gt; &lt;p&gt;Inspect the image to check the user ID, ports, and WorkingDir:&lt;/p&gt; &lt;pre&gt;$ sudo podman inspect registry.redhat.io/ubi8/php-72 | egrep -A 1 User\|ExposedPorts\|WorkingDir&lt;/pre&gt; &lt;p&gt;Next, create a systemd unit file to manage HTTPD. As root, use an editor or &lt;code&gt;cat &amp;#62;&lt;/code&gt; to create &lt;code&gt;/etc/systemd/system/httpd-wordpress.service&lt;/code&gt; with the following contents:&lt;/p&gt; &lt;pre&gt;[Unit] Description=Custom httpd + php Podman Container for example app After=mariadb-wordpress.service [Service] Type=simple TimeoutStartSec=30s ExecStartPre=-/usr/bin/podman rm "httpd-wordpress" ExecStart=/usr/bin/podman run --name httpd-wordpress -p 8080:8080 -v /opt/src/wordpress:/opt/app-root/src:Z --net host registry.redhat.io/ubi8/php-72 /bin/sh -c /usr/libexec/s2i/run ExecReload=-/usr/bin/podman stop "httpd-wordpress" ExecReload=-/usr/bin/podman rm "httpd-wordpress" ExecStop=-/usr/bin/podman stop "httpd-wordpress" Restart=always RestartSec=30 [Install] WantedBy=multi-user.target&lt;/pre&gt; &lt;p&gt;Tell systemd to reload, but don’t start it yet; we need to create our example application first.&lt;/p&gt; &lt;pre&gt;$ sudo systemctl daemon-reload&lt;/pre&gt; &lt;h2&gt;Use WordPress as an example PHP application&lt;/h2&gt; &lt;p&gt;Next, we’ll use WordPress as a placeholder for your PHP application under development. The code will be stored on your local machine and mapped into the HTTPD/PHP container when it runs. You’ll be able to edit the code on your local machine as you would any other application. Because it is mapped via a volume mount, the changes you make to the code will be immediately visible inside the container, which is very convenient for dynamic languages that don’t need to be compiled. This isn’t the way to do things for production use, but it is a way to get going quickly and should provide essentially the same &lt;a href="https://mitchdenny.com/the-inner-loop/"&gt;development inner loop&lt;/a&gt; that you’d have developing locally without containers.&lt;/p&gt; &lt;p&gt;Pull down and unpack the latest WordPress source code:&lt;/p&gt; &lt;pre&gt;$ cd /tmp $ curl -L -o wordpress-latest.tar.gz https://wordpress.org/latest.tar.gz&lt;/pre&gt; &lt;p&gt;Now we need to create a directory with the code that the httpd container can map and have access to. Although WordPress is good as a somewhat canonical demo app, it’s a little problematic in that it needs write access for the configuration file. Ideally, configuration would be stored separately from the code. For the sake of brevity in this article, we’ll do a quick hack and change the ownership of the WordPress directory to the user ID that the HTTPD container runs under (which we obtained previously).&lt;/p&gt; &lt;pre&gt;$ sudo mkdir -p /opt/src/wordpress $ sudo tar -C /opt/src -xvf /tmp/wordpress-latest.tar.gz $ sudo chown -R 1001 /opt/src/wordpress&lt;/pre&gt; &lt;h2&gt;Start the HTTPD and PHP container, test the app&lt;/h2&gt; &lt;p&gt;Start the container with systemd, then check the status:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl start httpd-wordpress $ sudo systemctl status httpd-wordpress&lt;/pre&gt; &lt;p&gt;Once the container is running, use a browser on your host system to navigate to http://127.0.0.1:8080/. You should see the WordPress &amp;#8220;set language&amp;#8221; screen. Follow the prompts to begin the installation. Then, set up the parameters to connect to the database:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Database name: wordpress&lt;/li&gt; &lt;li&gt;Username: wordpress&lt;/li&gt; &lt;li&gt;Password: mysecret&lt;/li&gt; &lt;li&gt;Database Host: 127.0.0.1:3306&lt;/li&gt; &lt;li&gt;Table Prefix: wp_&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup.png"&gt;&lt;img class=" aligncenter wp-image-620217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup-1024x685.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup-1024x685.png" alt="WordPress Database Configuration" width="640" height="428" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup-1024x685.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup-300x201.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup-768x514.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/wordpress-db-setup.png 1200w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want to access the HTTPD server from a different machine, you&amp;#8217;ll need to open up the firewall for port 8080:&lt;/p&gt; &lt;pre&gt;$ sudo firewall-cmd --permanent --add-port=8080/tcp $ sudo firewall-cmd --add-port=8080/tcp&lt;/pre&gt; &lt;p&gt;You can now develop your application on your local machine using the container versions of MariaDB, PHP, and Apache HTTPD.&lt;/p&gt; &lt;h2&gt;Use Buildah to create an image with your PHP app&lt;/h2&gt; &lt;p&gt;After you’ve developed your app, you can use Buildah to create a container image with your app, which is based on the UBI 8 PHP 7.2 image. When that container image is run, it will pull in PHP and HTTPD running on top of the UBI 8 base image.&lt;/p&gt; &lt;p&gt;With Buildah, you can use Dockerfiles or command lines, which are better for build automation and complex builds. First, the Dockerfile approach:&lt;/p&gt; &lt;p&gt;Create this Dockerfile in &lt;code&gt;/opt/src&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;FROM registry.redhat.io/ubi8/php-72 ADD wordpress /opt/app-root/src CMD [ "/bin/sh", "-c", "/usr/libexec/s2i/run"]&lt;/pre&gt; &lt;p&gt;To build the image (don’t forget the trailing ‘.’):&lt;/p&gt; &lt;pre&gt;$ cd /opt/src $ sudo buildah bud -t myorg/myphpapp .&lt;/pre&gt; &lt;p&gt;You can inspect the image with either Buildah or Podman:&lt;/p&gt; &lt;pre&gt;$ sudo buildah inspect myorg/myphpapp&lt;/pre&gt; &lt;p&gt;To run the new image, first stop the systemd container, then start the new container&lt;/p&gt; &lt;pre&gt;$ sudo systemctl stop httpd-wordpress $ sudo podman run --name myphpapp --net host -d -p 8080:8080 myorg/myphpapp&lt;/pre&gt; &lt;p&gt;If you go to http://127.0.01:8080/ in a browser, you should see the blog running in the new container.&lt;/p&gt; &lt;p&gt;You could now push the &lt;code&gt;myorg/myapp&lt;/code&gt; image to a container registry to share it with others.&lt;/p&gt; &lt;p&gt;Instead of using a Dockerfile, we could have built the image with Buildah command lines. Here are the commands that would build the same image:&lt;/p&gt; &lt;pre&gt;$ su - # buildah --name myorg/myphpapp from ubi8/php-72 # buildah copy myorg/myphpapp wordpress /opt/app-root/src # buildah config --cmd '/bin/sh -c /usr/libexec/s2i/run' myorg/myphpapp # buildah commit myorg/myphpapp&lt;/pre&gt; &lt;p&gt;Buildah has other nice features, including the mount command, which will let you mount the image on the host system for inspection:&lt;/p&gt; &lt;pre&gt;# mountpoint=$(buildah mount ${container}) # cd $mountpoint&lt;/pre&gt; &lt;p&gt;Now you can look around the image as a regular filesystem. You can also modify the image during builds. This opens up many possibilities for streamlining the way images are built. See &amp;#8220;&lt;a href="https://opensource.com/article/18/6/getting-started-buildah"&gt;Getting Started with Buildah&lt;/a&gt;&amp;#8221; for an overview.&lt;/p&gt; &lt;h2&gt;Next Steps&lt;/h2&gt; &lt;p&gt;By now you should see that it is pretty easy to get the software components you need running in containers so you can focus on development. It shouldn’t feel very different from developing without containers.&lt;/p&gt; &lt;p&gt;Once your app is ready, you can build it into a container image that uses the same components you used during development. You can push it to a registry such as Red Hat’s &lt;a href="https://quay.io/"&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can check out the other UBI 8 images available for use in the &lt;a href="https://access.redhat.com/containers/#/search/ubi8"&gt;Red Hat Container Catalog&lt;/a&gt;. If the language, runtime, or server aren’t available as a UBI image, you can build your own starting with the ubi8 base image. Then, you can add the application streams and other rpms you need using yum commands in a Dockerfile, or using &lt;code&gt;buildah run.&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The setup in this article has several drawbacks. It was intended to be a quick-and-easy demo, and there are many ways to improve the setup. For example, the containers were configured to share the host’s network with &lt;code&gt;--net host,&lt;/code&gt; which made it simple for the web server to connect to the database server. Although this is quick and easy for development, you don’t have the network isolation you get from the default container networking configuration. You could run into port conflicts if you have a number of apps that want to use the same port.&lt;/p&gt; &lt;p&gt;One way to improve the configuration would be to use Podman’s pod capabilities to put the web and database containers in the same pod where they share namespaces.&lt;/p&gt; &lt;h2&gt;The limits of compatibility and supportability with containers&lt;/h2&gt; &lt;p&gt;If you are considering running RHEL 8 containers on top of RHEL 7 in production, you should consult the &lt;a href="https://access.redhat.com/support/policy/rhel-container-compatibility"&gt;Red Hat Enterprise Linux Container Compatibility Matrix&lt;/a&gt; to see what is appropriate for your specific situation.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s a common misconception that you can run any container on any container host and &lt;em&gt;everything will just work&lt;/em&gt;. One of the advantages (and one of the disadvantages) of containers is that any container you run shares the Linux kernel of the host machine. There has been great effort to maintain an application binary interface (ABI) for compatibility between applications and kernel versions, but there have also been changes over time that may break things in subtle ways.&lt;/p&gt; &lt;p&gt;To put this in perspective, RHEL 8 uses Linux kernel version 4.18, whereas RHEL 7 uses kernel version 3.10. So, when you run RHEL 8 containers on top of RHEL 7, you are running things that were built and tested for a 4.18 kernel on top of a 3.10 kernel. Because of ABI compatibility, many things just work as long as they don’t dig too far down into the more esoteric system interfaces that have changed over time. As you can see from the sheer amount of containerized software that is available, most applications work on a range of host systems, but there are no guarantees that everything has been tested or is fully supported.&lt;/p&gt; &lt;p&gt;For more details, see Scott McCarty’s article, &amp;#8220;&lt;a href="https://www.redhat.com/en/blog/limits-compatibility-and-supportability-containers"&gt;The limits of compatibility and supportability with containers&lt;/a&gt;.&amp;#8221; He explains the problems that can (and have) occurred. However, he says, “At Red Hat, we feel confident that we can offer support, and patching of RHEL 6, RHEL 7, and RHEL 8 container images on RHEL 7 and RHEL 8 container hosts.” Hopefully, I didn’t take that too far out of context.&lt;/p&gt; &lt;h3&gt;More information&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Cheat sheets:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Podman Basics Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-developer-cheat-sheet/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux 8 Cheat Sheet&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;&lt;span style="font-weight: 400;"&gt;Podman and Buildah for Docker Users&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/29/managing-containerized-system-services-with-podman/"&gt;&lt;span style="font-weight: 400;"&gt;Managing containerized system services with podman&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;&lt;span style="font-weight: 400;"&gt;Podman: Managing pods and containers in a local container runtime&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://opensource.com/article/18/6/getting-started-buildah"&gt;&lt;span style="font-weight: 400;"&gt;Getting Started with Buildah&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index"&gt;&lt;span style="font-weight: 400;"&gt;Building, Running, and Managing Containers &amp;#8211; RHEL 8 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html-single/getting_started_with_containers/index"&gt;&lt;span style="font-weight: 400;"&gt;Getting Started with Containers &amp;#8211; RHEL 7 Documentation&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;UBI: &lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;&lt;span style="font-weight: 400;"&gt;The UBI page on Red Hat Developers&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;&lt;span style="font-weight: 400;"&gt;UBI FAQ&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li style="list-style-type: none;"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#38;linkname=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F23%2Frun-red-hat-enterprise-linux-8-in-a-container-on-rhel-7%2F&amp;#038;title=Run%20Red%20Hat%20Enterprise%20Linux%208%20in%20a%20container%20on%20RHEL%207" data-a2a-url="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/" data-a2a-title="Run Red Hat Enterprise Linux 8 in a container on RHEL 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EZzktLZEqes" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;You can start developing with the latest versions of languages, databases, and web servers available with Red Hat Enterprise Linux 8 even if you are still running RHEL 7. It is pretty simple to do with containers, even if you’ve only been through a “Hello, World” or two. By the end of this article, you’ll [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/"&gt;Run Red Hat Enterprise Linux 8 in a container on RHEL 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620177</post-id><dc:creator>Rob Terzi</dc:creator><dc:date>2019-08-23T07:00:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/23/run-red-hat-enterprise-linux-8-in-a-container-on-rhel-7/</feedburner:origLink></entry><entry><title>How DevOps is like auto racing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-ar2OlcuuBE/" /><category term="DevOps" /><author><name>Chris Short</name></author><id>https://developers.redhat.com/blog/?p=620727</id><updated>2019-08-22T07:01:54Z</updated><published>2019-08-22T07:01:54Z</published><content type="html">&lt;p&gt;When I talk about desired outcomes or answer a question about where to get started with any part of a &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; initiative, I like to mention NASCAR or Formula 1 racing. Crew chiefs for these race teams have a goal: finish in the best place possible with the resources available while overcoming the adversity thrown at you. If the team feels capable, the goal gets moved up a series of levels to holding a trophy at the end of the race.&lt;/p&gt; &lt;p&gt;To achieve their goals, race teams don&amp;#8217;t think from start to finish; they flip the table to look at the race from the end goal to the beginning. They set a goal, a stretch goal, and then work backward from that goal to determine how to get there. Work is delegated to team members to push toward the objectives that will get the team to the desired outcome.&lt;span id="more-620727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Team roles and goals&lt;/h3&gt; &lt;p&gt;The teams work with the physics they know (fuel economy, tire wear, etc.), a safe set of known challenges (pit stops, other drivers impeding progress, etc.), and what I like to refer to as an adversity budget. If you put 100% of effort into keeping the car in pristine condition to win, your team will fail. One dropped lug nut on a tire change will impact factors between that moment and the desired outcome. Adversity budget is like an SRE error budget, but it&amp;#8217;s way more art than science.&lt;/p&gt; &lt;p&gt;Everyone on the team knows they have a part to play on race day (from the owner to marketing to crew chief to engineer to pit lane sweeper). There are roles and responsibilities, communication protocols, disaster expectations, and many other business functions humming along in the background. And, everyone knows where they can help if there is a deficiency (like &lt;a href="https://devops.com/youre-not-devops-cant-pull-cord/"&gt;pulling the Andon cord&lt;/a&gt; and swarming in DevOps) or even worse, an incident (crash). An engineer in charge of aerodynamics is engaged when there is an issue impacting airflow over the vehicle. Another engineer will get involved if vibration starts in a particular part of the vehicle. The team on pit lane works to assemble the parts and pieces needed to repair the vehicle as it makes its way to the pit lane.&lt;/p&gt; &lt;p&gt;During a race, as laps get cranked out, several factors impact a team&amp;#8217;s desired outcome, and all the factors are accounted for and acted on where necessary. What are the weather conditions? How are tires wearing? How is the performance of the vehicle as measured by countless metrics? What&amp;#8217;s the feedback from the driver? What&amp;#8217;s the output of the data showing us compared to the drivers&amp;#8217; feedback? What feedback can we give the driver to make them feel 100% confident in the equipment they&amp;#8217;re using to push toward their individual goals? What are our competitors are doing? Now we have to make a pit stop a little ahead of schedule.&lt;/p&gt; &lt;h3&gt;Pit stops are like releases&lt;/h3&gt; &lt;p&gt;Pit stops are what I like to think of as releases. Race teams know they&amp;#8217;ll have to pit a certain number of times for various reasons. But, when that schedule is affected, calculus occurs to address the rest of the race. In Formula 1 racing, using flammable fuel on pit row is too dangerous, so they&amp;#8217;ve designed an entire system to eliminate mid-race refueling. If there is something inherently dangerous in a release process for a piece of software, that factor should either be minimized or worked out of the system entirely.&lt;/p&gt; &lt;p&gt;Conversely, in NASCAR, the dangerous process of refueling has been addressed in a different way. Putting the safeguards and processes in place to make the person jumping over a wall with a 40-pound gas can feel as confident as possible is critical. Think about what they&amp;#8217;re doing. This person is connecting a can of fuel to a hot car with its engine running. Meanwhile, people are running around changing tires, adjusting handling, and so forth. The psychological safety of every team member is essential. But, the ones sent to do more unsafe things should have a forgiving and rapid response system around them in the event of a catastrophe. That response system will remove them from harm while the team adjusts accordingly to its desired outcome. The team will believe in that system because it will be practiced 1000 times before it&amp;#8217;s employed once.&lt;/p&gt; &lt;h3&gt;Practice and train&lt;/h3&gt; &lt;p&gt;Race teams practice pit stops all week before the race. They do weight training and cardio programs to stay physically ready for the grueling conditions of race day. They are continually collaborating to address any issue that comes up. Software teams should also practice software releases often. If safety systems are in place and practice runs have been going well, they can release to production more frequently. Speed makes things safer in this mindset. It&amp;#8217;s not about doing the &amp;#8220;right&amp;#8221; thing; it&amp;#8217;s about addressing as many blockers to the desired outcome (goal) as possible and then collaborating and adjusting based on the real-time feedback that&amp;#8217;s observed. Expecting anomalies and working to improve quality and minimize the impact of those anomalies is the expectation of everyone in a DevOps world.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#38;linkname=How%20DevOps%20is%20like%20auto%20racing" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Fhow-devops-is-like-auto-racing%2F&amp;#038;title=How%20DevOps%20is%20like%20auto%20racing" data-a2a-url="https://developers.redhat.com/blog/2019/08/22/how-devops-is-like-auto-racing/" data-a2a-title="How DevOps is like auto racing"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/22/how-devops-is-like-auto-racing/"&gt;How DevOps is like auto racing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-ar2OlcuuBE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When I talk about desired outcomes or answer a question about where to get started with any part of a DevOps initiative, I like to mention NASCAR or Formula 1 racing. Crew chiefs for these race teams have a goal: finish in the best place possible with the resources available while overcoming the adversity thrown [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/22/how-devops-is-like-auto-racing/"&gt;How DevOps is like auto racing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/22/how-devops-is-like-auto-racing/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620727</post-id><dc:creator>Chris Short</dc:creator><dc:date>2019-08-22T07:01:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/22/how-devops-is-like-auto-racing/</feedburner:origLink></entry><entry><title>Troubleshooting Red Hat OpenShift applications with throwaway containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VQWUK0ddBp0/" /><category term="Containers" /><category term="Kubernetes" /><category term="OpenShift" /><category term="Red Hat Enterprise Linux" /><category term="containers" /><category term="Red Hat OpenShift" /><category term="troubleshooting" /><author><name>Fernando Lozano</name></author><id>https://developers.redhat.com/blog/?p=619217</id><updated>2019-08-22T07:00:38Z</updated><published>2019-08-22T07:00:38Z</published><content type="html">&lt;p&gt;Imagine this scenario: Your cool microservice works fine from your local machine but fails when deployed into your &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; cluster. You cannot see anything wrong with the code or anything wrong in your services, configuration maps, secrets, and other resources. But, you know something is not right. How do you look at things from the same perspective as your containerized application? How do you compare the runtime environment from your local application with the one from your container?&lt;/p&gt; &lt;p&gt;If you performed your due diligence, you wrote unit tests. There are no hard-coded configurations or hidden assumptions about the runtime environment. The cause should be related to the configuration your application receives inside OpenShift. Is it time to run your app under a step-by-step debugger or add tons of logging statements to your code?&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll show how two features of the OpenShift command-line client can help: the &lt;code&gt;oc run&lt;/code&gt; and &lt;code&gt;oc debug&lt;/code&gt; commands.&lt;span id="more-619217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Starting throwaway containers on Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;Most developers think about containers and OpenShift only for running long-lived applications. You create deployment configurations, stateful sets, or cron jobs that stay alive forever, creating and re-creating pods as required. Your application is always on, or at least on at fixed intervals.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;oc run&lt;/code&gt; command runs containers that perform a single task and then die. It creates unmanaged containers, that OpenShift does not replace when they die.&lt;/p&gt; &lt;p&gt;I once had an application that talked to a legacy database outside of my OpenShift cluster. The application was able to access the database from my local machine, but not from OpenShift. I needed the ability to test access to the database from inside OpenShift. This way I could find out whether I got the correct environment variables. I would also see whether the container could resolve the database’s host name. Maybe there was a firewall blocking access to the database?&lt;/p&gt; &lt;p&gt;This is a perfect scenario for the &lt;code&gt;oc run&lt;/code&gt; command. Just start a pod running the database container image. From that pod, you can use the database client and OS commands to troubleshoot configuration network connectivity. After a few quick tests, you don&amp;#8217;t need the pod anymore.&lt;/p&gt; &lt;pre&gt;$ oc run -it test --rm --restart Never \ --image registry.access.redhat.com/rhscl/mysql-57-rhel7 bash &lt;/pre&gt; &lt;p&gt;The previous command gives me an interactive (&lt;code&gt;-it&lt;/code&gt;) Bash prompt on a pod named test. OpenShift never restarts this pod (&lt;code&gt;--restart Never&lt;/code&gt;) and removes it when terminated (&lt;code&gt;--rm&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;The MySQL database image from Red Hat (rhscl/mysql-57-rhel7) provides the MySQL client and a few other useful commands, such as dig and host. With this, I can check that I can resolve the server host name, connect to the database, and verify my access credentials.&lt;/p&gt; &lt;h2&gt;Starting throwaway containers for management clients&lt;/h2&gt; &lt;p&gt;I could start the MySQL client, or any other command available from that container image, directly from the &lt;code&gt;oc run&lt;/code&gt; command. For example:&lt;/p&gt; &lt;pre&gt;$ oc run -it test --rm --restart Never \ --image registry.access.redhat.com/rhscl/mysql-57-rhel7 \ -- mysql -umydbuser -pmydbpassword -hmyserver.domain.example.com mydb&lt;/pre&gt; &lt;p&gt;Note the use of a double dash (&lt;code&gt;--&lt;/code&gt;) to prevent the &lt;code&gt;oc run&lt;/code&gt; command from interpreting the command options intended for the MySQL client. In the previous command, there is no &lt;code&gt;--mysql&lt;/code&gt; option; there is a space between &lt;code&gt;--&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;As another example, I could start the same throwaway container from the first example, then use another terminal to copy a SQL script into the container using the &lt;code&gt;oc cp&lt;/code&gt; command. Then I can run the SQL script using the throwaway container shell.&lt;/p&gt; &lt;p&gt;Because the MySQL client can take SQL scripts from the standard input, I could just add input redirection to the second example and be done. I just populated a test database. What about doing this from a shell script or an Ansible playbook, while I do not write that fancy operator that would deploy and initialize the database for my application?&lt;/p&gt; &lt;p&gt;Thanks to the &lt;code&gt;oc run&lt;/code&gt; command, I can use administration clients embedded into many container images, for example, the CLI administration tools for JBoss EAP, AMQ, and single-sign on. I do not need to install any of them on my local machine. Cool, isn’t it?&lt;/p&gt; &lt;h2&gt;Cloning a deployment to a debug container&lt;/h2&gt; &lt;p&gt;I could add more command-line options to the &lt;code&gt;oc run&lt;/code&gt; command and replicate all the settings of an existing deployment: environment variables, resource limits, and so on. If my intent were to replicate the runtime environment of my application, this would be too much work and be prone to errors.&lt;/p&gt; &lt;p&gt;However, this would be a scenario for the &lt;code&gt;oc debug&lt;/code&gt; command. It creates a new pod that is a carbon copy of an existing pod. If your pod does not start for whatever reason, you can create the copy from its deployment configuration.&lt;/p&gt; &lt;p&gt;Suppose that I created my application using &lt;code&gt;oc new-app&lt;/code&gt; and named it &lt;code&gt;myapp&lt;/code&gt;. To create a debug pod from its deployment configuration, I would use the following command:&lt;/p&gt; &lt;pre&gt;$ oc debug -t dc/myapp&lt;/pre&gt; &lt;p&gt;I get a Bash shell running under the same restraints as my application: uid, SElinux context, environment variables, and the same container image.&lt;/p&gt; &lt;p&gt;If I suspect that some of these restraints may be causing a failure, I can selectively override them using options from the &lt;code&gt;oc debug&lt;/code&gt; command. For example, adding the &lt;code&gt;--as-root&lt;/code&gt; option to the previous example gives me a root prompt inside the pod, but only if my OpenShift user has access to a security context constraint that allows me to do so.&lt;/p&gt; &lt;p&gt;The debug pod runs with health probes disabled. I can start my application manually to check whether the health probes are incorrect and forcing my pod to terminate. I could add options to the &lt;code&gt;oc debug&lt;/code&gt; command to enable health probes, disable init containers, disable sidecar containers, change labels that affect pod scheduling, and thus find which, if any, of the deployment settings are not correct for my application.&lt;/p&gt; &lt;h2&gt;Starting throwaway containers with RHEL tools container images&lt;/h2&gt; &lt;p&gt;As with the &lt;code&gt;oc run&lt;/code&gt; command, your actions using the &lt;code&gt;oc debug&lt;/code&gt; command are limited by what is included with your application container image. Fortunately, you can override the container image in your debug container. Good candidates are the rhel7/tools and the rhel8/support-tools container images from Red Hat.&lt;/p&gt; &lt;pre&gt;$ oc debug -t dc/myapp \ --image registry.access.redhat.com/rhel7/rhel-tools&lt;/pre&gt; &lt;p&gt;These images provide access to standard RHEL troubleshooting commands that would not be included in most application images, for example, the &lt;code&gt;ping&lt;/code&gt; and &lt;code&gt;dig&lt;/code&gt; commands.&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll need to download the rhel8/support-tools container image from the Red Hat terms-based registry (redhat.registry.io). Access to the terms-based registry requires a pull secret. Follow the instructions from &lt;a href="https://access.redhat.com/containers/?tab=images&amp;#38;get-method=registry-tokens#/registry.access.redhat.com/rhel8/support-tools"&gt;Red Hat Enterprise Linux Support Tools&lt;/a&gt; if needed.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You do not need a local container engine to run throwaway containers that perform troubleshooting and one-time tasks. You can run these containers quickly and easily on Red Hat OpenShift using the &lt;code&gt;oc run&lt;/code&gt; and &lt;code&gt;oc debug&lt;/code&gt; commands. And, your OpenShift cluster, if it is not a Minishift instance, is probably quicker to download container images and likely has more storage space and better bandwidth than your local workstation.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#38;linkname=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F22%2Ftroubleshooting-red-hat-openshift-applications-with-throwaway-containers%2F&amp;#038;title=Troubleshooting%20Red%20Hat%20OpenShift%20applications%20with%20throwaway%20containers" data-a2a-url="https://developers.redhat.com/blog/2019/08/22/troubleshooting-red-hat-openshift-applications-with-throwaway-containers/" data-a2a-title="Troubleshooting Red Hat OpenShift applications with throwaway containers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/22/troubleshooting-red-hat-openshift-applications-with-throwaway-containers/"&gt;Troubleshooting Red Hat OpenShift applications with throwaway containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VQWUK0ddBp0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Imagine this scenario: Your cool microservice works fine from your local machine but fails when deployed into your Red Hat OpenShift cluster. You cannot see anything wrong with the code or anything wrong in your services, configuration maps, secrets, and other resources. But, you know something is not right. How do you look at things [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/22/troubleshooting-red-hat-openshift-applications-with-throwaway-containers/"&gt;Troubleshooting Red Hat OpenShift applications with throwaway containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/22/troubleshooting-red-hat-openshift-applications-with-throwaway-containers/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619217</post-id><dc:creator>Fernando Lozano</dc:creator><dc:date>2019-08-22T07:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/22/troubleshooting-red-hat-openshift-applications-with-throwaway-containers/</feedburner:origLink></entry><entry><title>Why you should be developing on Red Hat Enterprise Linux</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NEs-_Hx4mWQ/" /><category term="Linux" /><category term="Operating System" /><category term="Red Hat Enterprise Linux" /><author><name>Bob Davis</name></author><id>https://developers.redhat.com/blog/?p=620767</id><updated>2019-08-21T07:01:41Z</updated><published>2019-08-21T07:01:41Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux&lt;/a&gt; through &lt;a href="https://developers.redhat.com/register/"&gt;Red Hat Developer&lt;/a&gt; is designed specifically so that software can be developed on the same platform to which it will be deployed—and here’s why it’s the best option for you.&lt;/p&gt; &lt;h2&gt;No-cost developer access&lt;/h2&gt; &lt;p&gt;With a $0 Red Hat Developer membership, you get access to Red Hat Enterprise Linux (RHEL) at no cost. We have &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;downloads available for RHEL&lt;/a&gt; versions starting as far back as 7.2, and as &lt;a href="https://developers.redhat.com/rhel8/"&gt;current as RHEL 8.1 Beta&lt;/a&gt;. The subscription costs nothing, and there are no additional costs for any of the software or content we make available through the program.&lt;/p&gt; &lt;h2&gt;RHEL is RHEL is RHEL&lt;/h2&gt; &lt;p&gt;The Red Hat Enterprise Linux you download from the Developer program is exactly the same RHEL you get with any other subscription. No, it’s not a trial. No, it’s not a preview. No, we haven’t disabled any features that you can enable with a paid subscription. Really—we want you to use this and be successful, so we don’t throw any surprises or weird workarounds at you.&lt;/p&gt; &lt;h2&gt;Deployment simplicity&lt;/h2&gt; &lt;p&gt;When you’re developing an application, you want to make sure you avoid unexpected snags. Developing an application on RHEL that will be deployed to a Red Hat Enterprise Linux platform helps you avoid surprises. If you code on the same version of RHEL you’re deploying to, all of your dependencies and runtime versions will be there. Remember when I said, “RHEL is RHEL is RHEL”?&lt;/p&gt; &lt;h2&gt;Red Hat Customer Portal access&lt;/h2&gt; &lt;p&gt;This is a major advantage of the Developer membership—full access to &lt;a href="https://access.redhat.com/"&gt;Red Hat Customer Portal&lt;/a&gt;. You get access to information about all of our products. Again, there’s nothing limited to “paid subscriptions”—no paywall anywhere—it’s all in the open with the membership. This information lets you address issues, see best practices, get self-service support, and get questions answered—and get it all straight from Red Hat.&lt;/p&gt; &lt;h2&gt;RHEL excels&lt;/h2&gt; &lt;p&gt;I want to talk a little more about why Red Hat Enterprise Linux is fantastic, too.&lt;/p&gt; &lt;h3&gt;Linux for enterprises&lt;/h3&gt; &lt;p&gt;Our customers range from huge, multinational corporations, to the classic “two developers and a dog” startups, but they all have something in common: They need their platform to be &lt;i&gt;enterprise grade&lt;/i&gt;. The &lt;a href="https://www.redhat.com/en/success-stories"&gt;big customers&lt;/a&gt; need their platforms to be rock solid, manageable, scalable, secure, and compliant with regulations. And the small startup with big dreams needs the same thing.&lt;/p&gt; &lt;h3&gt;Stable&lt;/h3&gt; &lt;p&gt;Stable can mean a couple things: the operating system doesn’t fail, or the operating system has a long lifecycle and can be depended on for a long time. Right now, I’m talking about the latter. When you decide to use RHEL, you’re getting an operating system with a &lt;a href="https://access.redhat.com/support/policy/updates/errata"&gt;published, 10-year lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Red Hat Enterprise Linux for continuous IT security&lt;/h3&gt; &lt;p&gt;Because our customers demand it, we build RHEL to support &lt;a href="https://www.redhat.com/en/technologies/guide/it-security"&gt;continuous IT security&lt;/a&gt;. The built-in protection of our compile-time options, our security backporting practice, our stronger defaults for best-practices cryptographic algorithms, stack smashing protection, ASLR, verification of patch and package updates, and SELinux turned on by default are all examples of how seriously we take this.&lt;/p&gt; &lt;h3&gt;Runtimes&lt;/h3&gt; &lt;p&gt;We include a full set of languages and runtimes, with stability and security in mind. Long lifecycle runtimes—as well as fast-moving, more dynamic runtimes—are there for developers. We are frequently involved in the upstream projects for these languages and are usually able to ship bug fixes and CVEs right away in the rpms. This extends to our container images as well, which we patch and repackage for any CVE anywhere in the container, not only if it is in the runtime.&lt;/p&gt; &lt;h3&gt;Developer tooling&lt;/h3&gt; &lt;p&gt;Compilers, performance tools, and language-specific toolkits are all built into RHEL. In RHEL 7, the&lt;a href="https://developers.redhat.com/products/gcc-clang-llvm-go-rust/overview"&gt; /devtools content set in Software Collections&lt;/a&gt; is where you’ll find things like the Developer Toolset (think “gcc and friends”), CLANG &amp;#38; LLVM, Go Toolset, Rust Toolset, and more. This is a set of tools designed for software developers. There’s also the complete set of RHEL container tools—&lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;Podman, Buildah, and Skopeo&lt;/a&gt;—so you can work on cloud-native container-based apps as well.&lt;/p&gt; &lt;h3&gt;Boring, as a feature&lt;/h3&gt; &lt;p&gt;All of these add up to an operating system that’s … well, sort of boring. Red Hat has made boring a feature. We get excited about delivering platforms that never get exciting. RHEL lets you focus on your development, on making your app exciting for your end users, on delivering your application to your market. If you’re up at 2 a.m. banging on your keyboard, it should be because you’ve had a eureka moment and are in the flow, not because you’re on a deadline and can&amp;#8217;t get something to work because your operating system is getting in the way.&lt;/p&gt; &lt;h2&gt;Usage options&lt;/h2&gt; &lt;p&gt;Like any other Linux distribution, you can use Red Hat Enterprise Linux through the Developer program as a VM or on bare metal—the choice is up to you, and we provide instructions on &lt;a href="https://developers.redhat.com/products/rhel/hello-world"&gt;installing RHEL on a number of hypervisors, as well as how to get it onto a laptop&lt;/a&gt;. Using your Red Hat Developer membership to run RHEL for development on cloud providers—usually in a “bring your own license” option—is also possible.&lt;/p&gt; &lt;p&gt;Download &lt;a href="http://Download RHEL https://developers.redhat.com/products/rhel/download"&gt;Red Hat Enterprise Linux&lt;/a&gt; from Red Hat Developer today.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Fwhy-you-should-be-developing-on-red-hat-enterprise-linux%2F&amp;#038;title=Why%20you%20should%20be%20developing%20on%20Red%20Hat%20Enterprise%20Linux" data-a2a-url="https://developers.redhat.com/blog/2019/08/21/why-you-should-be-developing-on-red-hat-enterprise-linux/" data-a2a-title="Why you should be developing on Red Hat Enterprise Linux"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/21/why-you-should-be-developing-on-red-hat-enterprise-linux/"&gt;Why you should be developing on Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NEs-_Hx4mWQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Enterprise Linux through Red Hat Developer is designed specifically so that software can be developed on the same platform to which it will be deployed—and here’s why it’s the best option for you. No-cost developer access With a $0 Red Hat Developer membership, you get access to Red Hat Enterprise Linux (RHEL) at [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/21/why-you-should-be-developing-on-red-hat-enterprise-linux/"&gt;Why you should be developing on Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/21/why-you-should-be-developing-on-red-hat-enterprise-linux/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">5</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620767</post-id><dc:creator>Bob Davis</dc:creator><dc:date>2019-08-21T07:01:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/21/why-you-should-be-developing-on-red-hat-enterprise-linux/</feedburner:origLink></entry><entry><title>Reactive Spring Boot programming with Vert.x</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/myfBvoSTH0c/" /><category term="Java" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Spring Boot" /><category term="reactive" /><category term="vert.x" /><author><name>Gytis Trikleris</name></author><id>https://developers.redhat.com/blog/?p=619087</id><updated>2019-08-21T07:00:16Z</updated><published>2019-08-21T07:00:16Z</published><content type="html">&lt;p&gt;The latest bundle of Red Hat supported &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_2.1.x_runtime_guide/developing-reactive-applications-using-spring-boot-vertx_spring-boot"&gt;Spring Boot starters&lt;/a&gt; was recently released. In addition to supporting the popular Red Hat products for our &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; customers, the Red Hat Spring Boot team was also busy creating new ones. The most recent technical preview added is a group of Eclipse &lt;a href="https://github.com/snowdrop/vertx-spring-boot"&gt;Vert.x Spring Boot&lt;/a&gt; starters, which provide a Spring-native vocabulary for the popular JVM reactive toolkit.&lt;/p&gt; &lt;p&gt;Let’s quickly go through the main concepts to get everybody on the same page before looking into an example.&lt;span id="more-619087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;A reactive system as defined in the &lt;a href="https://www.reactivemanifesto.org/"&gt;Reactive Manifesto&lt;/a&gt; is responsive, resilient, elastic, and message-driven. These properties guarantee easy replication, non-blocking communication with high system resources utilization and great fault tolerance. At the latest stage of software evolution, with cloud-first, low-latency, and highly data-intensive applications, reactive systems provide a great value for money.&lt;/p&gt; &lt;p&gt;In our newest release, we have introduced a few &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"&gt;Spring WebFlux&lt;/a&gt; extensions for &lt;a href="https://vertx.io/"&gt;Vert.x&lt;/a&gt;. With these extensions, you can build your application the way you’re used to—using WebFlux and &lt;a href="https://projectreactor.io/"&gt;Project Reactor&lt;/a&gt;—while network communications will be handled by the Vert.x servers and clients.&lt;/p&gt; &lt;p&gt;Implementation of a reactive HTTP layer will get you one step closer to a fully reactive system, but don&amp;#8217;t stop there. In an ideal scenario, your whole system would be reactive. Inter-component communication, data access, cache, and other utilities should support reactive streams and back-pressure to guarantee that your application can withstand whatever is thrown its way. Vert.x provides reactive clients for all of these types of technologies, and we will gradually introduce them into our &lt;a href="https://github.com/snowdrop/vertx-spring-boot"&gt;Vert.x Spring Boot starters bundle&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Let’s look at a few code examples to see how Vert.x could be used in a WebFlux application.&lt;/p&gt; &lt;h2&gt;Message Board Example&lt;/h2&gt; &lt;p&gt;To demonstrate Vert.x WebFlux in action, let&amp;#8217;s create a simple messaging board application. This application consists of two services: messages and dashboard.&lt;/p&gt; &lt;p&gt;Messages service uses a makeshift broker to publish and subscribe to new messages. These two operations are exposed via HTTP REST API as GET and POST operations. GET endpoint returns a JSON objects stream that is updated every time a new message arrives.&lt;/p&gt; &lt;p&gt;Dashboard service uses an HTTP client to request new messages from the messages service and displays them in a dashboard. The dashboard web page is updated live when new messages arrive.&lt;/p&gt; &lt;p&gt;The good news is that Vert.x Spring Boot HTTP starter doesn’t require any code changes for the majority of scenarios, as compared to a default WebFlux application. Our auto-configuration handles beans creation and registration with WebFlux SPI. Thus, the only change needed is a Maven dependency update.&lt;/p&gt; &lt;p&gt;Add our BOM and starter to your application’s &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: xml; title: ; notranslate"&gt; &amp;#60;dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;me.snowdrop&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-bom&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.1.6.Final&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;!-- Other application specific dependencies --&amp;#62; &amp;#60;/dependencies&amp;#62; &amp;#60;/dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;dev.snowdrop&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;vertx-spring-boot-starter-http&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;!-- Other application specific dependencies --&amp;#62; &amp;#60;/dependencies&amp;#62; &lt;/pre&gt; &lt;h3&gt;Message Service&lt;/h3&gt; &lt;p&gt;There are two ways to define HTTP endpoints in a WebFlux application. Messages service uses functional endpoints, which allow a functional programming style. Dashboard, however, uses traditional Spring MVC style annotated controllers.&lt;/p&gt; &lt;p&gt;When working with functional endpoints, we need to define handler functions that are then invoked by a router function. First, let&amp;#8217;s implement a GET handler, which will subscribe to a broker and return a stream of messages.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Mono&amp;#60;ServerResponse&amp;#62; getHandler(MessagesBroker broker) { return ok() .contentType(APPLICATION_STREAM_JSON) .body(broker.subscribe(), Message.class); } &lt;/pre&gt; &lt;p&gt;Then, let’s define a POST handler, which will receive new messages and publish them to the broker.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; private Mono&amp;#60;ServerResponse&amp;#62; postHandler(ServerRequest request, MessagesBroker broker) { Mono&amp;#60;Message&amp;#62; messageMono = request .bodyToMono(Message.class) .doOnNext(broker::publish); return accepted() .contentType(APPLICATION_JSON) .body(messageMono, Message.class); } &lt;/pre&gt; &lt;p&gt;Finally, let’s create a router function, which will map HTTP requests to the correct handlers.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; @Bean public RouterFunction&amp;#60;ServerResponse&amp;#62; router(MessagesBroker broker) { return route() .GET(&amp;#34;/&amp;#34;, accept(APPLICATION_STREAM_JSON), r -&amp;#62; getHandler(broker)) .POST(&amp;#34;/&amp;#34;, request -&amp;#62; postHandler(request, broker)) .build(); } &lt;/pre&gt; &lt;p&gt;As you can see in this code example, handlers delegate message handling to a broker component which implements the main logic of messages distribution. For this example, it is just a simple Flux generator. In a real-world scenario, however, it would be replaced by an actual message broker, such as Red Hat AMQ.&lt;/p&gt; &lt;h3&gt;Dashboard&lt;/h3&gt; &lt;p&gt;Dashboard implements two controllers using the Spring MVC style. The first one renders an HTML page with the message board. The second controller provides a GET endpoint, which is used by the HTML page to receive messages as server-sent events.&lt;/p&gt; &lt;p&gt;Here’s a controller for the index page.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; @Controller public class DashboardController { @GetMapping(&amp;#34;/&amp;#34;) public String home() { return &amp;#34;index&amp;#34;; } } &lt;/pre&gt; &lt;p&gt;The messages endpoint is a little bit more complex. It injects a web client builder and creates a Vert.x WebFlux web client. It uses this client to retrieve new messages from the messages service and forwards them to the web page.&lt;/p&gt; &lt;p&gt;Here’s the implementation of the messages controller.&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; @RestController public class MessagesController { private static final String MESSAGES_SERVICE_URL = &amp;#34;http://localhost:8081&amp;#34;; private final WebClient webClient; public MessagesController(WebClient.Builder webClientBuilder) { this.webClient = webClientBuilder .baseUrl(MESSAGES_SERVICE_URL) .build(); } @GetMapping(path = &amp;#34;/messages&amp;#34;, produces = TEXT_EVENT_STREAM_VALUE) public Flux&amp;#60;Message&amp;#62; getMessages() { return webClient .get() .accept(APPLICATION_STREAM_JSON) .retrieve() .bodyToFlux(Message.class); } } &lt;/pre&gt; &lt;p&gt;If you start both applications and open your browser at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;, you would first see an empty page. Leave it open and send a few messages from your terminal. Note that our demo broker doesn’t provide persistence, so only messages received while the dashboard is open will be presented.&lt;/p&gt; &lt;p&gt;Post a couple of messages from your terminal.&lt;/p&gt; &lt;pre&gt;$ http POST :8081 sender=John text="Hello, World" $ http POST :8081 sender=John text="Hello again" &lt;/pre&gt; &lt;p&gt;Now the dashboard should have two messages in it.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-619107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot-1024x485.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot-300x142.png" alt="" width="300" height="142" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot-300x142.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot-768x364.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot-1024x485.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/vertx-spring-boot-blog-screenshot.png 1114w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Please check out the Vert.x Spring Boot project at our &lt;a href="https://github.com/snowdrop/vertx-spring-boot"&gt;GitHub repository&lt;/a&gt;. We would appreciate your input and pull requests. The latest release also includes features that are not covered in this article, such as WebSockets and mail client, so check out the samples to learn more.&lt;/p&gt; &lt;p&gt;In the upcoming releases, we plan to introduce AMQP 1.0 and Kafka clients to provide reactive messaging between your services.&lt;/p&gt; &lt;h3&gt;See more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Full example code: &lt;a href="https://github.com/gytis/vertx-spring-boot-message-board-example"&gt;https://github.com/gytis/vertx-spring-boot-message-board-example&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Project repository: &lt;a href="https://github.com/snowdrop/vertx-spring-boot"&gt;https://github.com/snowdrop/vertx-spring-boot&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#38;linkname=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F21%2Freactive-spring-boot-programming-with-vert-x%2F&amp;#038;title=Reactive%20Spring%20Boot%20programming%20with%20Vert.x" data-a2a-url="https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/" data-a2a-title="Reactive Spring Boot programming with Vert.x"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/"&gt;Reactive Spring Boot programming with Vert.x&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/myfBvoSTH0c" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The latest bundle of Red Hat supported Spring Boot starters was recently released. In addition to supporting the popular Red Hat products for our Spring Boot customers, the Red Hat Spring Boot team was also busy creating new ones. The most recent technical preview added is a group of Eclipse Vert.x Spring Boot starters, which [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/"&gt;Reactive Spring Boot programming with Vert.x&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619087</post-id><dc:creator>Gytis Trikleris</dc:creator><dc:date>2019-08-21T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/21/reactive-spring-boot-programming-with-vert-x/</feedburner:origLink></entry></feed>
